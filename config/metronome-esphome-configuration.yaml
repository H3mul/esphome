substitutions:
  ip_address: !secret metronome_ip

<<: !include base-esphome-configuration.yaml

esp32:
  board: esp32-c3-devkitm-1
  variant: esp32c3

esphome:
  name: metronome-node-1
  friendly_name: Metronome
  platformio_options:
    board_build.flash_mode: dio
  includes:
    - lib/fakelight.h

number:
  - id: bpm
    name: BPM
    platform: template
    optimistic: true
    mode: box
    unit_of_measurement: bpm
    min_value: 30
    max_value: 200
    step: 5
    initial_value: 80
    restore_value: true
  - id: tailwidth
    name: Tail Width
    platform: template
    optimistic: true
    mode: box
    unit_of_measurement: leds
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 3
    restore_value: true
  - id: endwidth
    name: Edge Color Width
    platform: template
    optimistic: true
    mode: box
    unit_of_measurement: leds
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 7
    restore_value: true

light:
  - platform: custom
    lambda: |-
      auto light_out = new FakeLightOutput();
      App.register_component(light_out);
      return {light_out};
    lights:
      - name: "LED edges"
        id: metronome_led_ends
        restore_mode: RESTORE_DEFAULT_OFF

  - platform: neopixelbus
    variant: WS2812X
    # type: BRG
    pin: GPIO3
    num_leds: 100
    name: "LED"
    id: metronome_led
    restore_mode: RESTORE_DEFAULT_OFF
    effects:
      - addressable_lambda:
          name: Metronome
          update_interval: 5ms
          lambda: |-
            static int last_t = 0;
            static int at_led = 0;
            static int len = it.size() - 1;

            const LightColorValues endColorValues = id(metronome_led_ends).current_values;
            const Color endColor = Color(
                    endColorValues.get_red() * 255,
                    endColorValues.get_green() * 255,
                    endColorValues.get_blue() * 255
                  ).fade_to_black(endColorValues.get_brightness());

            const int tail_width = id(tailwidth).state;
            const int end_width = id(endwidth).state;

            const int period = 60000.0f / id(bpm).state;
            const int step_t = period / len;
            const int now = millis();

            if(initial_run) {
              last_t = now;
            }

            const int delta_t = now - last_t;
            if (delta_t < step_t) {
              return;
            }

            at_led += delta_t / step_t;

            it.all() = ESPColor::BLACK;
            for (int i = 0; i < tail_width; i++) {
              const int strip_position = len - abs((at_led + i) % (len * 2) - len);
              const float dim_factor = 1.0f / (tail_width + 1) * (tail_width - i);
              const float distance_from_end = min(strip_position, len - strip_position);

              float end_gradient_factor = 0.0;
              if (distance_from_end <= end_width) {
                end_gradient_factor = 1.0f / (end_width) * (end_width - distance_from_end);
              }

              it[strip_position] = current_color.gradient(endColor, end_gradient_factor * 255)
                                                .fade_to_black(dim_factor * 255);
            }

            last_t = now - delta_t % step_t;
            it.schedule_show();

    on_turn_on:
      - light.control: 
          id: metronome_led
          effect: "Metronome"

binary_sensor:
  - id: metronome_toggle_button
    internal: true
    platform: gpio
    pin:
      number: GPIO2
      inverted: true
    on_press:
      then:
        light.toggle: metronome_led

sensor:
  - platform: rotary_encoder
    internal: true
    name: "BPM Manual Input"
    pin_a: GPIO1
    pin_b: GPIO0
    on_clockwise:
      - number.increment:
          id: bpm
          cycle: false
    on_anticlockwise:
      - number.decrement:
          id: bpm
          cycle: false

i2c:
  sda: GPIO9
  scl: GPIO8
  frequency: 300kHz

font:
  - file: "gfonts://Open Sans"
    id: bpm_font
    size: 14

  - file: "gfonts://Open Sans"
    id: bpm_value_font
    size: 30 

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    update_interval: 30ms
    lambda: |-
      it.printf(it.get_width()/2, 0, id(bpm_value_font), TextAlign::TOP_CENTER, "%.0f", id(bpm).state);
      it.print(it.get_width()/2, it.get_height(), id(bpm_font), TextAlign::BOTTOM_CENTER, "BPM");