substitutions:
  ip_address: !secret metronome_ip

packages:
  base: !include base-esphome-configuration.yaml

wifi:
  networks:
    - ssid: !secret pixel_hotspot_ssid
      password: !secret pixel_hotspot_password
    - ssid: !secret travel_router_ssid
      password: !secret travel_router_password
  fast_connect: false 

logger:
  level: INFO

esp32:
  board: esp32-c3-devkitm-1
  variant: esp32c3

esphome:
  name: metronome-node-1
  friendly_name: Metronome
  platformio_options:
    board_build.flash_mode: dio
  includes:
    - lib/fakelight.h

web_server:
    port: 80
    version: 3

number:
  - id: bpm
    name: BPM
    platform: template
    optimistic: true
    unit_of_measurement: bpm
    min_value: 20
    max_value: 300
    step: 5
    initial_value: 80
    restore_value: true
  - id: tailwidth
    name: Trail length
    platform: template
    optimistic: true
    unit_of_measurement: leds
    min_value: 1
    max_value: 100
    step: 1
    initial_value: 3
    restore_value: true
    entity_category: config
  - id: endwidth
    name: Beat Color Width
    platform: template
    optimistic: true
    unit_of_measurement: leds
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 7
    restore_value: true
    entity_category: config

light:
  - platform: custom
    lambda: |-
      auto light_out = new FakeLightOutput();
      App.register_component(light_out);
      return {light_out};
    lights:
      - name: "Beat Edge Color"
        id: metronome_led_ends
        restore_mode: RESTORE_DEFAULT_OFF
        entity_category: config

  - platform: esp32_rmt_led_strip
    chipset: WS2812
    rmt_channel: 1
    rgb_order: GRB
    pin: GPIO3
    num_leds: 72
    name: "Metronome"
    id: metronome_led
    max_refresh_rate: 8ms
    restore_mode: RESTORE_DEFAULT_OFF
    default_transition_length: 200ms
    effects:
      - addressable_lambda:
          name: Pendulum
          update_interval: 10ms
          lambda: |-
            static int last_t = 0;
            static int at_led = 0;
            static int len = it.size() - 1;
            static int center = it.size() / 2;

            const LightColorValues endColorValues = id(metronome_led_ends).current_values;
            const Color endColor = Color(
                    endColorValues.get_red() * 255,
                    endColorValues.get_green() * 255,
                    endColorValues.get_blue() * 255
                  ).fade_to_black(endColorValues.get_brightness());

            const int tail_width = id(tailwidth).state;
            const int end_width = id(endwidth).state;

            const int period = 60000.0f / id(bpm).state;
            const int step_t = period / len;
            const int now = millis();

            if(initial_run) {
              last_t = now;
            }

            const int delta_t = now - last_t;
            if (delta_t < step_t) {
              return;
            }

            at_led = (at_led + delta_t / step_t) % (len * 2);

            it.all() = ESPColor::BLACK;

            const int head_position = len - abs(at_led - len);

            const int head_len = abs(center - head_position);
            const int dir = (center - head_position) > 0 ? 1 : -1;

            for (int i = 0; i < head_len; i++) {
              const int strip_position = head_position + i * dir;
              const float distance_from_end = min(strip_position, len - strip_position);

              float dim_factor = max((i - tail_width/2) / (float) head_len, 0.0f);

              float end_gradient_factor = 0.0;
              if (distance_from_end < end_width) {
                end_gradient_factor = (float)(end_width - distance_from_end) / end_width;
              }

              it[strip_position] = current_color.gradient(endColor, end_gradient_factor * 255)
                                                .fade_to_black(dim_factor * 255);
            }

            last_t = now - delta_t % step_t;
            it.schedule_show();
      - addressable_lambda:
          name: Running Light
          update_interval: 10ms
          lambda: |-
            static int last_t = 0;
            static int at_led = 0;
            static int len = it.size() - 1;

            const LightColorValues endColorValues = id(metronome_led_ends).current_values;
            const Color endColor = Color(
                    endColorValues.get_red() * 255,
                    endColorValues.get_green() * 255,
                    endColorValues.get_blue() * 255
                  ).fade_to_black(endColorValues.get_brightness());

            const int tail_width = id(tailwidth).state;
            const int end_width = id(endwidth).state;

            const int period = 60000.0f / id(bpm).state;
            const int step_t = period / len;
            const int now = millis();

            if(initial_run) {
              last_t = now;
            }

            const int delta_t = now - last_t;
            if (delta_t < step_t) {
              return;
            }

            at_led = (at_led + delta_t / step_t) % (len * 2);

            it.all() = ESPColor::BLACK;
            for (int i = 0; i < tail_width; i++) {
              const int strip_position = len - abs((at_led + i) % (len * 2) - len);
              const float distance_from_end = min(strip_position, len - strip_position);

              float dim_factor = 0.0;
              if (i < tail_width - 1) {
                dim_factor = 1 - (float) i / (float)tail_width;
              }

              float end_gradient_factor = 0.0;
              if (distance_from_end < end_width) {
                end_gradient_factor = (float)(end_width - distance_from_end) / end_width;
              }

              it[strip_position] = current_color.gradient(endColor, end_gradient_factor * 255)
                                                .fade_to_black(dim_factor * 255);
            }

            last_t = now - delta_t % step_t;
            it.schedule_show();
    on_turn_on:
      - light.control: 
          id: metronome_led
          effect: "Running Light"

binary_sensor:
  - id: metronome_toggle_button
    internal: true
    platform: gpio
    pin:
      number: GPIO2
      inverted: true
    on_press:
      then:
        light.toggle: metronome_led

sensor:
  - platform: rotary_encoder
    internal: true
    name: "BPM Manual Input"
    pin_a: GPIO0
    pin_b: GPIO1
    on_clockwise:
      - number.increment:
          id: bpm
          cycle: false
    on_anticlockwise:
      - number.decrement:
          id: bpm
          cycle: false

text_sensor:
  - platform: wifi_info
    ip_address:
      internal: true
      id: metronome_ip

i2c:
  sda: GPIO9
  scl: GPIO8
  frequency: 800kHz

font:
  - file: "gfonts://Open Sans"
    id: bpm_font
    size: 14
  - file: "gfonts://Open Sans"
    id: bpm_value_font
    size: 30 
  - file: "gfonts://Open Sans"
    id: ip_font
    size: 10 

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    update_interval: 100ms
    lambda: |-
      int _ = 0;
      int bpmLabelX = 0;
      int bpmLabelY = 0;
      int bpmLabelWidth = 0;
      int bpmLabelHeight = 0;
      const int yAdjust = 10;

      char bpmValue[100] = { 0 };
      sprintf(bpmValue, "%.0f", id(bpm).state);

      it.get_text_bounds(it.get_width()/2, -yAdjust, &bpmValue[0], id(bpm_value_font), TextAlign::TOP_CENTER,
        &bpmLabelX, &bpmLabelX, &bpmLabelWidth, &bpmLabelHeight);

      it.printf(it.get_width()/2, -yAdjust, id(bpm_value_font), TextAlign::TOP_CENTER, bpmValue);
      it.print(it.get_width()/2, bpmLabelY + bpmLabelHeight - 2*yAdjust, id(bpm_font), TextAlign::TOP_CENTER, "BPM");
      it.printf(0, it.get_height(), id(ip_font), TextAlign::BOTTOM_LEFT, "IP: %s",
        id(metronome_ip).state != "" ? id(metronome_ip).state.c_str() : "Disconnected");